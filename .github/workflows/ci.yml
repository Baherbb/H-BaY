name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  database-setup:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: ecommerce
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: iamawriterbbHPharryPotter5378++
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - name: Verify PostgreSQL Service
        run: |
          until pg_isready -h 127.0.0.1 -p 5432 -U postgres; do
            echo "Waiting for database to be ready..."
            sleep 5
          done
          echo "Database is ready!"

  docker-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Backend Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          load: true
          tags: hbay-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Frontend Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          load: true
          tags: hbay-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  backend-tests:
    runs-on: ubuntu-latest
    needs: [database-setup]
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
          cache-dependency-path: './backend/package-lock.json'

      - name: Install Dependencies
        run: npm ci

      - name: Set Environment Variables
        run: |
          echo "DATABASE_URL=postgresql://postgres:iamawriterbbHPharryPotter5378++@localhost:5432/ecommerce" >> $GITHUB_ENV

      - name: Build and Test
        run: |
          npm run build
          npm test -- --passWithNoTests
        env:
          NODE_ENV: test
          DATABASE_URL: ${{ env.DATABASE_URL }}

  frontend-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install Dependencies
        run: |
          npm ci
          npm install --save-dev jest ts-jest @types/jest @testing-library/react @testing-library/jest-dom

      - name: Run Jest Tests
        run: npx jest --detectOpenHandles
        env:
          CI: true

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, docker-build]
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: ecommerce
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: iamawriterbbHPharryPotter5378++
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install Frontend Dependencies
        run: npm ci
        working-directory: ./frontend

      - name: Install Backend Dependencies
        run: npm ci
        working-directory: ./backend

      - name: Build Backend
        run: npm run build
        working-directory: ./backend

      - name: Start Backend Server
        run: npm start &
        working-directory: ./backend
        env:
          NODE_ENV: test
          DATABASE_URL: postgres://postgres:iamawriterbbHPharryPotter5378++@localhost:5432/ecommerce

      - name: Start Frontend Server
        run: npm start &
        working-directory: ./frontend
        env:
          REACT_APP_API_URL: http://localhost:3000

      - name: Run Cypress Tests
        uses: cypress-io/github-action@v5
        with:
          start: npm start
          wait-on: 'http://localhost:3000, http://localhost:3000/api/health'
          wait-on-timeout: 120
          working-directory: ./frontend
